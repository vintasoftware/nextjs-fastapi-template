{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#nextjs-fastapi-template","title":"Next.js FastAPI Template","text":"<p> Next.js FastAPI Template: Python + Modern TypeScript stack with Zod validation. </p> <p> </p> <p>The Next.js FastAPI Template provides a solid foundation for scalable, high-performance web applications, following clean architecture and best practices. It simplifies development by integrating FastAPI, Pydantic, and Next.js with TypeScript and Zod, ensuring end-to-end type safety and schema validation between frontend and backend.</p> <p>The FastAPI backend supports fully asynchronous operations, optimizing database queries, API routes, and test execution for better performance. Deployment is seamless, with both backend and frontend fully deployable to Vercel, enabling quick product releases with minimal configuration.</p>"},{"location":"#key-features","title":"Key features","text":"<p>\u2714 End-to-end type safety \u2013 Automatically generated typed clients from the OpenAPI schema ensure seamless API contracts between frontend and backend.</p> <p>\u2714 Hot-reload updates \u2013 The client updates automatically when backend routes change, keeping FastAPI and Next.js in sync.</p> <p>\u2714 Versatile foundation \u2013 Designed for MVPs and production-ready applications, with a pre-configured authentication system and API layer.</p> <p>\u2714 Quick deployment \u2013 Deploys a full-stack application\u2014including authentication flow and a dashboard\u2014on Vercel in just a few steps.</p> <p>\u2714 Production-ready authentication \u2013 Includes a pre-configured authentication system and dashboard interface, allowing you to immediately start development with user management features.</p>"},{"location":"#technology-stack","title":"Technology stack","text":"<p>This template features a carefully selected set of technologies to ensure efficiency, scalability, and ease of use:</p> <ul> <li>Zod + TypeScript \u2013 Type safety and schema validation across the stack.</li> <li>fastapi-users \u2013 Complete authentication system with:<ul> <li>Secure password hashing</li> <li>JWT authentication</li> </ul> </li> <li>Email-based password recovery</li> <li>shadcn/ui \u2013 Prebuilt React components with Tailwind CSS.</li> <li>OpenAPI-fetch \u2013 Fully typed client generation from the OpenAPI schema.</li> <li>UV \u2013 Simplified dependency management and packaging.</li> <li>Docker Compose \u2013 Consistent environments for development and production.</li> <li>Pre-commit hooks \u2013 Automated code linting, formatting, and validation before commits.</li> <li>Vercel Deployment \u2013 Serverless backend and scalable frontend, deployable with minimal configuration.</li> </ul> <p>This is a partial list of the technologies included in the template. For a complete overview, visit our Technology selection page. Disclaimer: This project is not affiliated with Vercel.</p>"},{"location":"#get-started-contribute","title":"Get Started &amp; Contribute","text":"<p>To use this template or contribute, visit our Get Started and Contribution guides.</p>"},{"location":"#support","title":"Support","text":"<p>If you have any questions or need help, feel free to create a thread on GitHub Discussions.</p> <p>In case you're facing a bug, please check existing issues and create a new one if needed.</p>"},{"location":"#commercial-support","title":"Commercial Support","text":"<p>This is an open-source project maintained by Vinta Software. We are always looking for exciting work! If you need any commercial support, feel free to get in touch: contact@vinta.com.br</p>"},{"location":"additional-settings/","title":"Additional Settings","text":""},{"location":"additional-settings/#production-ready-authentication-dashboard-features","title":"Production-Ready Authentication &amp; Dashboard features","text":"<p>This template comes with a pre-configured authentication system and a simple dashboard interface, allowing you to start building your application with user management features immediately.</p>"},{"location":"additional-settings/#hot-reload-on-development","title":"Hot Reload on development","text":"<p>The project includes two hot reloads running the application, one for the backend and one for the frontend. These automatically restart local servers when they detect changes, ensuring that the application is always up to date without needing manual restarts.</p> <ul> <li>The backend hot reload monitors changes to the backend code.</li> <li>The frontend hot reload monitors changes to the frontend code and the <code>openapi.json</code> schema generated by the backend.</li> </ul>"},{"location":"additional-settings/#manual-execution-of-hot-reload-commands","title":"Manual Execution of Hot Reload Commands","text":"<p>You can manually execute the same commands that the hot reloads call when they detect a change:</p> <ol> <li> <p>To export the <code>openapi.json</code> schema:    <pre><code>cd fastapi_backend &amp;&amp; uv run python -m commands.generate_openapi_schema\n</code></pre>    or using Docker:    <pre><code>docker compose run --rm --no-deps -T backend uv run python -m commands.generate_openapi_schema\n</code></pre></p> </li> <li> <p>To generate the frontend client:    <pre><code>cd nextjs-frontend &amp;&amp; npm run generate-client\n</code></pre>    or using Docker:    <pre><code>docker compose run --rm --no-deps -T frontend npm run generate-client\n</code></pre></p> </li> </ol>"},{"location":"additional-settings/#testing","title":"Testing","text":"<p>To run the tests, you need to run the test database container:    <pre><code>make docker-up-test-db\n</code></pre></p> <p>Then run the tests locally:    <pre><code>make test-backend\nmake test-frontend\n</code></pre></p> <p>Or using Docker:    <pre><code>make docker-test-backend\nmake docker-test-frontend\n</code></pre></p>"},{"location":"additional-settings/#pre-commit-setup","title":"Pre-Commit Setup","text":"<p>To maintain code quality and consistency, the project includes two separate pre-commit configuration files: - <code>.pre-commit-config.yaml</code> is used to run pre-commit checks locally. - <code>.pre-commit-config.docker.yaml</code> is used to run pre-commit checks within Docker.</p>"},{"location":"additional-settings/#installing-and-activating-pre-commit-hooks","title":"Installing and Activating Pre-Commit Hooks","text":"<p>To activate pre-commit hooks, run the following commands for each configuration file:</p> <ul> <li> <p>For the local configuration file:   <pre><code>pre-commit install -c .pre-commit-config.yaml\n</code></pre></p> </li> <li> <p>For the Docker configuration file:   <pre><code>pre-commit install -c .pre-commit-config.docker.yaml\n</code></pre></p> </li> </ul>"},{"location":"additional-settings/#localhost-email-server-setup","title":"Localhost Email Server Setup","text":"<p>To set up the email server locally, you need to start MailHog by running the following command:    <pre><code>make docker-up-mailhog\n</code></pre></p> <ul> <li>Email client: Access the email at <code>http://localhost:8025</code>.</li> </ul>"},{"location":"additional-settings/#running-pre-commit-checks","title":"Running Pre-Commit Checks","text":"<p>To manually run the pre-commit checks on all files, use:</p> <pre><code>pre-commit run --all-files -c .pre-commit-config.yaml\n</code></pre> <p>or</p> <pre><code>pre-commit run --all-files -c .pre-commit-config.docker.yaml\n</code></pre>"},{"location":"additional-settings/#updating-pre-commit-hooks","title":"Updating Pre-Commit Hooks","text":"<p>To update the hooks to their latest versions, run:</p> <pre><code>pre-commit autoupdate\n</code></pre>"},{"location":"additional-settings/#alembic-database-migrations","title":"Alembic Database Migrations","text":"<p>If you need to create a new Database Migration:    <pre><code>make docker-db-schema migration_name=\"add users\"\n</code></pre> then apply the migration to the database:    <pre><code>make docker-migrate-db\n</code></pre></p>"},{"location":"additional-settings/#github-actions","title":"GitHub Actions","text":"<p>This project has a pre-configured GitHub Actions setup to enable CI/CD. The workflow configuration files are inside the .github/workflows directory. You can customize these workflows to suit your project's needs better.</p>"},{"location":"additional-settings/#secrets-configuration","title":"Secrets Configuration","text":"<p>For the workflows to function correctly, add the secret keys to your GitHub repository's settings. Navigate to Settings &gt; Secrets and variables &gt; Actions and add the following keys: <pre><code>DATABASE_URL: The connection string for your primary database.\nTEST_DATABASE_URL: The connection string for your test database.\nACCESS_SECRET_KEY: The secret key for access token generation.\nRESET_PASSWORD_SECRET_KEY: The secret key for reset password functionality.\nVERIFICATION_SECRET_KEY: The secret key for email or user verification.\n</code></pre></p>"},{"location":"additional-settings/#makefile","title":"Makefile","text":"<p>This project includes a <code>Makefile</code> that provides a set of commands to simplify everyday tasks such as starting the backend and frontend servers, running tests, building Docker containers, and more.</p>"},{"location":"additional-settings/#available-commands","title":"Available Commands","text":"<p>You can see all available commands and their descriptions by running the following command in your terminal:</p> <pre><code>make help\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>This changelog references changes made both to the FastAPI backend, <code>fastapi_backend</code>, and the frontend TypeScript client, <code>nextjs-frontend</code>.</p> <p>Note</p> <p>The backend and the frontend are versioned together, that is, they have the same version number. When you update the backend, you should also update the frontend to the same version.</p>"},{"location":"changelog/#0.0.2","title":"0.0.2 March 12, 2025","text":"<ul> <li>Generate release draft using github actions</li> </ul>"},{"location":"changelog/#0.0.1","title":"0.0.1 March 12, 2025","text":"<ul> <li>Initial release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We can always use your help to improve Next.js FastAPI Template! Please feel free to tackle existing issues. If you have a new idea, please create a thread on Discussions.</p> <p>Please follow this guide to learn more about how to develop and test the project locally, before opening a pull request.</p>"},{"location":"contributing/#local-dev-setup","title":"Local Dev Setup","text":""},{"location":"contributing/#clone-the-repo","title":"Clone the repo","text":"<pre><code>git clone git@github.com:vintasoftware/nextjs-fastapi-template.git\n</code></pre> <p>Check the Get Started page to complete the setup.</p>"},{"location":"contributing/#install-pre-commit-hooks","title":"Install pre-commit hooks","text":"<p>Check the Additional Settings - Install pre-commit hooks section to complete the setup.</p> <p>It's critical to run the pre-commit hooks before pushing your code to follow the project's code style, and avoid linting errors.</p>"},{"location":"contributing/#updating-the-openapi-schema","title":"Updating the OpenAPI schema","text":"<p>It's critical to update the OpenAPI schema when you make changes to the FastAPI routes or related files:</p> <p>Check the Additional Settings - Manual execution of hot reload commands section to run the command.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>Check the Additional Settings - Testing section to run the tests.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use mkdocs-material to generate the documentation from markdown files. Check the files in the <code>docs</code> directory.</p> <p>To run the documentation locally, you need to run:</p> <pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>Info</p> <p>The backend and the frontend are versioned together, that is, they should have the same version number.</p> <p>To release and publish a new version, follow these steps:</p> <ol> <li>Update the version in <code>fastapi_backend/pyproject.toml</code>, <code>nextjs-frontend/package.json</code>.</li> <li>Update the changelog in <code>CHANGELOG.md</code>.</li> <li>Open a PR with the changes.</li> <li>Once the PR is merged, run the Release GitHub Action to create a draft release.</li> <li>Review the draft release, ensure the description has at least the associated changelog entry, and publish it.</li> </ol>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#overview","title":"Overview","text":"<p>Deploying to Vercel is supported, with dedicated buttons for the Frontend and Backend applications. Both require specific configurations during and after deployment to ensure proper functionality.</p>"},{"location":"deployment/#frontend-deployment","title":"Frontend Deployment","text":"<ul> <li>Click the Frontend button above to start the deployment process.  </li> <li>During deployment, you will be prompted to set the <code>API_BASE_URL</code>. Use a placeholder value (e.g., <code>https://</code>) for now, as this will be updated with the backend URL later.  </li> <li>Complete the deployment process here.</li> </ul>"},{"location":"deployment/#backend-deployment","title":"Backend Deployment","text":"<ul> <li>Click the Backend button above to begin deployment.</li> <li>First, set up the database. The connection is automatically configured, so follow the steps, and it should work by default.</li> <li> <p>During the deployment process, you will be prompted to configure the following environment variables:</p> </li> <li> <p>CORS_ORIGINS </p> <ul> <li>Set this to <code>[\"*\"]</code> initially to allow all origins. Later, you can update this with the frontend URL.</li> </ul> </li> <li> <p>ACCESS_SECRET_KEY, RESET_PASSWORD_SECRET_KEY, VERIFICATION_SECRET_KEY </p> <ul> <li>During deployment, you can temporarily set these secret keys as plain strings (e.g., <code>examplekey</code>). However, you should generate secure keys and update them after the deployment in the Post-Deployment Configuration section.</li> </ul> </li> <li> <p>Complete the deployment process here.</p> </li> </ul>"},{"location":"deployment/#ci-github-actions-setup-for-production-deployment","title":"CI (GitHub Actions) Setup for Production Deployment","text":"<p>We provide the prod-backend-deploy.yml and prod-frontend-deploy.yml files to enable continuous integration through Github Actions. To connect them to GitHub, simply move them to the .github/workflows/ directory.</p> <p>You can do it with the following commands:    <pre><code> mv prod-backend-deploy.yml .github/workflows/prod-backend-deploy.yml\n mv prod-frontend-deploy.yml .github/workflows/prod-frontend-deploy.yml\n</code></pre></p>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ol> <li>Create a Vercel Token:  </li> <li>Generate your Vercel Access Token.  </li> <li> <p>Save the token as <code>VERCEL_TOKEN</code> in your GitHub secrets.</p> </li> <li> <p>Install Vercel CLI: <pre><code>pnpm i -g vercel@latest\n</code></pre></p> </li> <li>Authenticate your account.     <code>bash    vercel login</code></li> </ol>"},{"location":"deployment/#database-creation-required","title":"Database Creation (Required)","text":"<ol> <li> <p>Choosing a Database</p> <ul> <li>You can use your database hosted on a different service or opt for the Neon database, which integrates seamlessly with Vercel.</li> </ul> </li> <li> <p>Setting Up a Neon Database via Vercel</p> <ul> <li>In the Projects dashboard page on Vercel, navigate to the Storage section.  </li> <li>Select the option to Create a Database to provision a Neon database.</li> </ul> </li> <li> <p>Configuring the Database URL</p> <ul> <li>After creating the database, retrieve the Database URL provided by Neon.  </li> <li>Include this URL in your Environment Variables under <code>DATABASE_URL</code>.  </li> </ul> </li> <li> <p>Migrating the Database</p> <ul> <li>The database migration will happen automatically during the GitHub action deployment, setting up the necessary tables and schema.</li> </ul> </li> </ol>"},{"location":"deployment/#frontend-setup","title":"Frontend Setup","text":"<ol> <li> <p>Link the nextjs-frontend Project</p> </li> <li> <p>Navigate to the nextjs-frontend directory and run:    <pre><code>cd nextjs-frontend\nvercel link\n</code></pre></p> </li> <li>Follow the prompts:</li> <li>Link to existing project? No</li> <li> <p>Modify settings? No</p> </li> <li> <p>Save Project IDs and Add GitHub Secrets:</p> </li> <li>Open <code>nextjs-frontend/.vercel/project.json</code> and add the following to your GitHub repository secrets:<ul> <li><code>projectId</code> \u2192 <code>VERCEL_PROJECT_ID_FRONTEND</code></li> <li><code>orgId</code> \u2192 <code>VERCEL_ORG_ID</code></li> </ul> </li> </ol>"},{"location":"deployment/#backend-setup","title":"Backend Setup","text":"<ol> <li> <p>Link the fastapi_backend Project</p> </li> <li> <p>Navigate to the fastapi_backend directory and run:    <pre><code>cd fastapi_backend\nvercel link --local-config=vercel.prod.json\n</code></pre></p> </li> <li>We use a specific configuration file to set the --local-config value.</li> <li>Follow the prompts:</li> <li>Link to existing project? No</li> <li> <p>Modify settings? No</p> </li> <li> <p>Save Project IDs and Add GitHub Secrets:</p> </li> <li>Open <code>fastapi_backend/.vercel/project.json</code> and add the following to your GitHub repository secrets:<ul> <li><code>projectId</code> \u2192 <code>VERCEL_PROJECT_ID_BACKEND</code></li> <li><code>orgId</code> \u2192 <code>VERCEL_ORG_ID</code> (Only in case you haven't added that before)</li> </ul> </li> </ol>"},{"location":"deployment/#notes","title":"Notes","text":"<ul> <li>Once everything is set up, run <code>git push</code>, and the deployment will automatically occur.</li> <li>Please ensure you complete the setup for both the frontend and backend separately.</li> <li>Refer to the Vercel CLI Documentation for more details.</li> <li>You can find the project_id into the vercel web project settings.</li> <li>You can find the organization_id into the vercel web organization settings.</li> </ul>"},{"location":"deployment/#post-deployment-configuration","title":"Post-Deployment Configuration","text":""},{"location":"deployment/#frontend","title":"Frontend","text":"<ul> <li>Navigate to the Settings page of the deployed frontend project.  </li> <li>Access the Environment Variables section.  </li> <li>Update the <code>API_BASE_URL</code> variable with the backend URL once the backend deployment is complete.</li> </ul>"},{"location":"deployment/#backend","title":"Backend","text":"<ul> <li>Access the Settings page of the deployed backend project.  </li> <li> <p>Navigate to the Environment Variables section and update the following variables with secure values:</p> <ul> <li>CORS_ORIGINS </li> <li> <p>Once the frontend is deployed, replace <code>[\"*\"]</code> with the actual frontend URL.</p> </li> <li> <p>ACCESS_SECRET_KEY </p> </li> <li> <p>Generate a secure key for API access and set it here.  </p> </li> <li> <p>RESET_PASSWORD_SECRET_KEY</p> </li> <li> <p>Generate a secure key for password reset functionality and set it.</p> </li> <li> <p>VERIFICATION_SECRET_KEY </p> </li> <li>Generate a secure key for user verification and configure it.</li> </ul> </li> <li> <p>For detailed instructions on setting these secret keys, please look at the section on Setting up Environment Variables.</p> </li> </ul>"},{"location":"deployment/#fluid-serverless-activation","title":"Fluid serverless activation","text":"<p>Fluid is Vercel's new concurrency model for serverless functions, allowing them to handle multiple  requests per execution instead of spinning up a new instance for each request. This improves performance,  reduces cold starts, and optimizes resource usage, making serverless workloads more efficient.</p> <p>Follow this guide to activate Fluid.</p>"},{"location":"get-started/","title":"Get Started","text":"<p>To use this template for your own project:</p> <ol> <li>Create a new repository using this template by following GitHub's template repository guide</li> <li>Clone your new repository and navigate to it: <code>cd your-project-name</code></li> <li>Make sure you have Python 3.12 installed</li> </ol> <p>Once completed, proceed to the Setup section below.</p>"},{"location":"get-started/#setup","title":"Setup","text":""},{"location":"get-started/#installing-required-tools","title":"Installing Required Tools","text":""},{"location":"get-started/#1-uv","title":"1. uv","text":"<p>uv is used to manage Python dependencies in the backend. Install uv by following the official installation guide.</p>"},{"location":"get-started/#2-nodejsm-npm-and-pnpm","title":"2. Node.jsm, npm and pnpm","text":"<p>To run the frontend, ensure Node.js and npm are installed. Follow the Node.js installation guide. After that, install pnpm by running: <pre><code>npm install -g pnpm\n</code></pre></p>"},{"location":"get-started/#3-docker","title":"3. Docker","text":"<p>Docker is needed to run the project in a containerized environment. Follow the appropriate installation guide:</p> <ul> <li>Install Docker for Mac</li> <li>Install Docker for Windows</li> <li>Get Docker CE for Linux</li> </ul>"},{"location":"get-started/#4-docker-compose","title":"4. Docker Compose","text":"<p>Ensure <code>docker-compose</code> is installed. Refer to the Docker Compose installation guide.</p>"},{"location":"get-started/#setting-up-environment-variables","title":"Setting Up Environment Variables","text":"<p>Backend (<code>fastapi_backend/.env</code>):</p> <p>Copy the <code>.env.example</code> files to <code>.env</code> and update the variables with your own values.    <pre><code>cd fastapi_backend &amp;&amp; cp .env.example .env\n</code></pre> You will only need to update the secret keys. You can use the following command to generate a new secret key:    <pre><code>python3 -c \"import secrets; print(secrets.token_hex(32))\"\n</code></pre></p> <ul> <li> <p>The DATABASE, MAIL, OPENAPI, CORS, and FRONTEND_URL settings are ready to use locally.</p> </li> <li> <p>The DATABASE and MAIL settings are already configured in Docker Compose if you're using Docker.</p> </li> <li> <p>The OPENAPI_URL setting is commented out. Uncommenting it will hide the /docs and openapi.json URLs, which is ideal for production.</p> </li> </ul> <p>You can check the .env.example file for more information about the variables.</p> <p>Frontend (<code>nextjs-frontend/.env.local</code>):</p> <p>Copy the <code>.env.example</code> files to <code>.env</code>. These values are unlikely to change, so you can leave them as they are.    <pre><code>cd nextjs-frontend &amp;&amp; cp .env.example .env\n</code></pre></p>"},{"location":"get-started/#running-the-database","title":"Running the Database","text":"<p>Use Docker to run the database to avoid local installation issues. Build and start the database container:    <pre><code>docker compose build db\ndocker compose up -d db\n</code></pre> Run the following command to apply database migrations:    <pre><code>make docker-migrate-db\n</code></pre></p>"},{"location":"get-started/#build-the-project-without-docker","title":"Build the project (without Docker):","text":"<p>To set the project environment locally, use the following commands:</p>"},{"location":"get-started/#backend","title":"Backend","text":"<p>Navigate to the <code>fastapi_backend</code> directory and run:    <pre><code>uv sync\n</code></pre></p>"},{"location":"get-started/#frontend","title":"Frontend","text":"<p>Navigate to the <code>nextjs-frontend</code> directory and run:    <pre><code>pnpm install\n</code></pre></p>"},{"location":"get-started/#build-the-project-with-docker","title":"Build the project (with Docker):","text":"<p>Build the backend and frontend containers:    <pre><code>make docker-build\n</code></pre></p>"},{"location":"get-started/#running-the-application","title":"Running the Application","text":"<p>If you are not using Docker:</p> <p>Start the FastAPI server:    <pre><code>make start-backend\n</code></pre></p> <p>Start the Next.js development server:    <pre><code>make start-frontend\n</code></pre></p> <p>If you are using Docker:</p> <p>Start the FastAPI server container:    <pre><code>make docker-start-backend\n</code></pre> Start the Next.js development server container:    <pre><code>make docker-start-frontend\n</code></pre></p> <ul> <li>Backend: Access the API at <code>http://localhost:8000</code>.</li> <li>Frontend: Access the web application at <code>http://localhost:3000</code>.</li> </ul>"},{"location":"get-started/#important-considerations","title":"Important Considerations","text":"<ul> <li>Environment Variables: Ensure your <code>.env</code> files are up-to-date.</li> <li>Database Setup: It is recommended to use Docker to run the database, even when running the backend and frontend locally, to simplify configuration and avoid potential conflicts.</li> <li>Consistency: It is not recommended to switch between running the project locally and using Docker, as this may cause permission issues or unexpected problems. You can choose one method and stick with it.</li> </ul>"},{"location":"support/","title":"Support","text":"<p>If you have any questions or need help, feel free to create a thread on GitHub Discussions.</p> <p>In case you're facing a bug, please check existing issues and create a new one if needed.</p>"},{"location":"support/#commercial-support","title":"Commercial Support","text":"<p>This is an open-source project maintained by Vinta Software. We are always looking for exciting work! If you need any commercial support, feel free to get in touch: contact@vinta.com.br</p>"},{"location":"technology-selection/","title":"Technology Selection","text":"<p>This template streamlines building APIs with FastAPI and dynamic frontends with Next.js. It integrates the backend and frontend using @hey-api/openapi-ts to generate a type-safe client, with automated watchers to keep the OpenAPI schema and client updated, ensuring a smooth and synchronized development workflow.  </p> <ul> <li>Next.js: Fast, SEO-friendly frontend framework  </li> <li>FastAPI: High-performance Python backend  </li> <li>SQLAlchemy: Powerful Python SQL toolkit and ORM</li> <li>PostgreSQL: Advanced open-source relational database</li> <li>Pydantic: Data validation and settings management using Python type annotations</li> <li>Zod + TypeScript: End-to-end type safety and schema validation  </li> <li>fastapi-users: Complete authentication system with:<ul> <li>Secure password hashing by default</li> <li>JWT (JSON Web Token) authentication</li> <li>Email-based password recovery</li> </ul> </li> <li>Shadcn/ui: Beautiful and customizable React components</li> <li>OpenAPI-fetch: Fully typed client generation from OpenAPI schema  </li> <li>fastapi-mail: Efficient email handling for FastAPI applications</li> <li>uv: An extremely fast Python package and project manager</li> <li>Pytest: Powerful Python testing framework</li> <li>Code Quality Tools:<ul> <li>Ruff: Fast Python linter</li> <li>ESLint: JavaScript/TypeScript code quality</li> </ul> </li> <li>Hot reload watchers:  <ul> <li>Backend: Watchdog for monitoring file changes  </li> <li>Frontend: Chokidar for live updates  </li> </ul> </li> <li>Docker and Docker Compose: Consistent environments for development and production</li> <li>MailHog: Email server for development</li> <li>Pre-commit hooks: Enforce code quality with automated checks  </li> <li>OpenAPI JSON schema: Centralized API documentation and client generation  </li> </ul> <p>With this setup, you'll save time and maintain a seamless connection between your backend and frontend, boosting productivity and reliability.</p>"}]}